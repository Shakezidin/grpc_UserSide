// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: admin.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AdminUserService_FetchAllSUser_FullMethodName = "/pb.AdminUserService/FetchAllSUser"
	AdminUserService_DeleteUser_FullMethodName    = "/pb.AdminUserService/DeleteUser"
	AdminUserService_CreateUser_FullMethodName    = "/pb.AdminUserService/CreateUser"
	AdminUserService_SearchUser_FullMethodName    = "/pb.AdminUserService/SearchUser"
	AdminUserService_EditUser_FullMethodName      = "/pb.AdminUserService/EditUser"
)

// AdminUserServiceClient is the client API for AdminUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminUserServiceClient interface {
	FetchAllSUser(ctx context.Context, in *FetchUsers, opts ...grpc.CallOption) (*LoginResponce, error)
	DeleteUser(ctx context.Context, in *DeleteUserById, opts ...grpc.CallOption) (*AdminResult, error)
	CreateUser(ctx context.Context, in *UserCreate, opts ...grpc.CallOption) (*AdminResult, error)
	SearchUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	EditUser(ctx context.Context, in *Users, opts ...grpc.CallOption) (*UserResponse, error)
}

type adminUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminUserServiceClient(cc grpc.ClientConnInterface) AdminUserServiceClient {
	return &adminUserServiceClient{cc}
}

func (c *adminUserServiceClient) FetchAllSUser(ctx context.Context, in *FetchUsers, opts ...grpc.CallOption) (*LoginResponce, error) {
	out := new(LoginResponce)
	err := c.cc.Invoke(ctx, AdminUserService_FetchAllSUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminUserServiceClient) DeleteUser(ctx context.Context, in *DeleteUserById, opts ...grpc.CallOption) (*AdminResult, error) {
	out := new(AdminResult)
	err := c.cc.Invoke(ctx, AdminUserService_DeleteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminUserServiceClient) CreateUser(ctx context.Context, in *UserCreate, opts ...grpc.CallOption) (*AdminResult, error) {
	out := new(AdminResult)
	err := c.cc.Invoke(ctx, AdminUserService_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminUserServiceClient) SearchUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, AdminUserService_SearchUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminUserServiceClient) EditUser(ctx context.Context, in *Users, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, AdminUserService_EditUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminUserServiceServer is the server API for AdminUserService service.
// All implementations must embed UnimplementedAdminUserServiceServer
// for forward compatibility
type AdminUserServiceServer interface {
	FetchAllSUser(context.Context, *FetchUsers) (*LoginResponce, error)
	DeleteUser(context.Context, *DeleteUserById) (*AdminResult, error)
	CreateUser(context.Context, *UserCreate) (*AdminResult, error)
	SearchUser(context.Context, *UserRequest) (*SearchResponse, error)
	EditUser(context.Context, *Users) (*UserResponse, error)
	mustEmbedUnimplementedAdminUserServiceServer()
}

// UnimplementedAdminUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdminUserServiceServer struct {
}

func (UnimplementedAdminUserServiceServer) FetchAllSUser(context.Context, *FetchUsers) (*LoginResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAllSUser not implemented")
}
func (UnimplementedAdminUserServiceServer) DeleteUser(context.Context, *DeleteUserById) (*AdminResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedAdminUserServiceServer) CreateUser(context.Context, *UserCreate) (*AdminResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedAdminUserServiceServer) SearchUser(context.Context, *UserRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUser not implemented")
}
func (UnimplementedAdminUserServiceServer) EditUser(context.Context, *Users) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditUser not implemented")
}
func (UnimplementedAdminUserServiceServer) mustEmbedUnimplementedAdminUserServiceServer() {}

// UnsafeAdminUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminUserServiceServer will
// result in compilation errors.
type UnsafeAdminUserServiceServer interface {
	mustEmbedUnimplementedAdminUserServiceServer()
}

func RegisterAdminUserServiceServer(s grpc.ServiceRegistrar, srv AdminUserServiceServer) {
	s.RegisterService(&AdminUserService_ServiceDesc, srv)
}

func _AdminUserService_FetchAllSUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchUsers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminUserServiceServer).FetchAllSUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminUserService_FetchAllSUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminUserServiceServer).FetchAllSUser(ctx, req.(*FetchUsers))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminUserService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminUserServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminUserService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminUserServiceServer).DeleteUser(ctx, req.(*DeleteUserById))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminUserService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminUserServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminUserService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminUserServiceServer).CreateUser(ctx, req.(*UserCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminUserService_SearchUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminUserServiceServer).SearchUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminUserService_SearchUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminUserServiceServer).SearchUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminUserService_EditUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Users)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminUserServiceServer).EditUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminUserService_EditUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminUserServiceServer).EditUser(ctx, req.(*Users))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminUserService_ServiceDesc is the grpc.ServiceDesc for AdminUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AdminUserService",
	HandlerType: (*AdminUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchAllSUser",
			Handler:    _AdminUserService_FetchAllSUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _AdminUserService_DeleteUser_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _AdminUserService_CreateUser_Handler,
		},
		{
			MethodName: "SearchUser",
			Handler:    _AdminUserService_SearchUser_Handler,
		},
		{
			MethodName: "EditUser",
			Handler:    _AdminUserService_EditUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin.proto",
}
